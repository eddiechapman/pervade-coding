from flask import render_template, flash, redirect, url_for, session
from flask_login import login_user, logout_user, current_user, login_required
from app import db
from app.auth import bp
from app.auth.forms import LoginForm, RegistrationForm, ResetPasswordRequestForm, ResetPasswordForm
from app.models import User
from app.auth.email import send_password_reset_email



@bp.route('/login', methods=['GET', 'POST'])
def login():
    """Authenticate the user.
    
    Process and validate the login form data and retrieve the user's account data.
    
    Returns:
        Redirect to home page if user is already logged in.
            Redirect to login page if login is not successful.
            Redirect to home page if authentication is successful.
            Redirect to login page if form has not been submitted.
    """
    if current_user.is_authenticated:
        return redirect(url_for('coding.index'))
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()
        if user is None or not user.check_password(form.password.data):
            flash('Invalid username or password')
            return redirect(url_for('auth.login'))
        login_user(user, remember=form.remember_me.data)
        return redirect(url_for('coding.index'))
    return render_template('auth/login.html', title='Sign In', form=form)


@bp.route('/logout')
def logout():
    """Log user out and clear session of skipped awards.
    
    Returns:
        index.html: Redirect to home page after logout
    """
    session.clear()
    logout_user()
    return redirect(url_for('coding.index'))


@bp.route('/register', methods=['GET', 'POST'])
def register():
    """Add the user to the database.
    
    Returns:
        index.html: Redirect to home page is user is already logged in
        login.html: Redirect to login page if registration is successful
        register.html: Redirects to registration page if form not yet submitted.
    """
    if current_user.is_authenticated:
        return redirect(url_for('coding.index'))
    form = RegistrationForm()
    if form.validate_on_submit():
        user = User(username=form.username.data, email=form.email.data)
        user.set_password(form.password.data)
        db.session.add(user)
        db.session.commit()
        flash('Congratulations, you are now a registered user!')
        return redirect(url_for('auth.login'))
    return render_template('auth/register.html',
                           title='Register', form=form)


@bp.route('/reset_password_request', methods=['GET', 'POST'])
def reset_password_request():
    """Request a password reset email if the password has been forgotten.
    
    Returns:
        Redirects to password reset form if form has not been submitted.
            Redirects to home page if user is already logged in.
            Redirects to login page if reset password email is successfully sent.
    """
    if current_user.is_authenticated:
        return redirect(url_for('coding.index'))
    form = ResetPasswordRequestForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user:
            send_password_reset_email(user)
        flash('Check your email for the instructions to reset your password')
        return redirect(url_for('auth.login'))
    return render_template('auth/reset_password_request.html', title='Reset Password', form=form)


@bp.route('/reset_password/<token>', methods=['GET', 'POST'])
def reset_password(token):
    """Allow a user to reset their password.
    
    Args:
        token (str): A reset token generated by send_password_reset_email
    
    Returns:
        reset_password.html: Redirect to reset password page when navigating to
            this route for the first time.
            Redirect to home page if user is already logged in.
            Redirect to home page if reset token is not authenticated.
            Redirect to login page if reset token is authenticated.
    """
    if current_user.is_authenticated:
        return redirect(url_for('coding.index'))
    user = User.verify_reset_password_token(token)
    if not user:
        return redirect(url_for('coding.index'))
    form = ResetPasswordForm()
    if form.validate_on_submit():
        user.set_password(form.password.data)
        db.session.commit()
        flash('Your password has been reset.')
        return redirect(url_for('auth.login'))
    return render_template('auth/reset_password.html', form=form)